{"ast":null,"code":"class Api {\n  constructor(options) {\n    // тело конструктора\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка ${res.status}`);\n  }\n  getInitialCards() {\n    return fetch(`${this.baseUrl}/cards`, {\n      headers: this.headers\n    }).then(this._checkResponse);\n  }\n\n  // другие методы работы с API\n  getUserInfo() {\n    return fetch(`${this.baseUrl}/users/me`, {\n      headers: this.headers\n    }).then(this._checkResponse);\n  }\n  patchUserInfo(inputValues) {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: inputValues.name,\n        about: inputValues.description\n      })\n    }).then(this._checkResponse);\n  }\n  postNewCard(cardInfo) {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(cardInfo)\n    }).then(this._checkResponse);\n  }\n  deleteCard(id) {\n    return fetch(`${this.baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(this._checkResponse);\n  }\n  putLike(id) {\n    return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      headers: this.headers\n    }).then(this._checkResponse);\n  }\n  deleteLike(id) {\n    return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(this._checkResponse);\n  }\n  patchAvatar(link) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-62',\n  headers: {\n    authorization: 'de4d1a5e-b347-4878-b328-8f0194692392',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","baseUrl","headers","_checkResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","then","getUserInfo","patchUserInfo","inputValues","method","body","JSON","stringify","name","about","description","postNewCard","cardInfo","deleteCard","id","putLike","deleteLike","patchAvatar","link","avatar","api","authorization"],"sources":["C:/Users/VEDON/WebstormProjects/mesto-react/mestoreact/src/utils/Api.js"],"sourcesContent":["class Api {\r\n    constructor(options) {\r\n        // тело конструктора\r\n        this.baseUrl = options.baseUrl;\r\n        this.headers = options.headers;\r\n    }\r\n\r\n    _checkResponse(res) {\r\n        return res.ok\r\n            ? res.json()\r\n            : Promise.reject(`Ошибка ${res.status}`);\r\n    }\r\n\r\n    getInitialCards() {\r\n        return fetch(`${this.baseUrl}/cards`, {\r\n            headers: this.headers\r\n        })\r\n            .then(this._checkResponse)\r\n    }\r\n\r\n    // другие методы работы с API\r\n    getUserInfo() {\r\n        return fetch(`${this.baseUrl}/users/me`, {\r\n            headers: this.headers\r\n        })\r\n            .then(this._checkResponse)\r\n    }\r\n\r\n    patchUserInfo(inputValues) {\r\n        return fetch(`${this.baseUrl}/users/me`, {\r\n            method: 'PATCH',\r\n            headers: this.headers,\r\n            body: JSON.stringify({name: inputValues.name, about: inputValues.description})\r\n        })\r\n            .then(this._checkResponse)\r\n    }\r\n\r\n    postNewCard(cardInfo) {\r\n        return fetch(`${this.baseUrl}/cards`, {\r\n            method: 'POST',\r\n            headers: this.headers,\r\n            body: JSON.stringify(cardInfo)\r\n        })\r\n            .then(this._checkResponse)\r\n    }\r\n\r\n    deleteCard(id) {\r\n        return fetch(`${this.baseUrl}/cards/${id}`, {\r\n            method: \"DELETE\",\r\n            headers: this.headers,\r\n        })\r\n            .then(this._checkResponse)\r\n    }\r\n\r\n    putLike(id) {\r\n        return fetch(`${this.baseUrl}/cards/${id}/likes`, {\r\n            method: \"PUT\",\r\n            headers: this.headers,\r\n        })\r\n            .then(this._checkResponse)\r\n    }\r\n\r\n    deleteLike(id) {\r\n        return fetch(`${this.baseUrl}/cards/${id}/likes`, {\r\n            method: \"DELETE\",\r\n            headers: this.headers,\r\n        })\r\n            .then(this._checkResponse)\r\n    }\r\n\r\n    patchAvatar(link) {\r\n        return fetch(`${this.baseUrl}/users/me/avatar`, {\r\n            method: \"PATCH\",\r\n            headers: this.headers,\r\n            body: JSON.stringify({avatar: link})\r\n        })\r\n            .then(this._checkResponse)\r\n    }\r\n}\r\n\r\nconst api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-62',\r\n    headers: {\r\n        authorization: 'de4d1a5e-b347-4878-b328-8f0194692392',\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\nexport default api"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}